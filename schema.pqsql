DROP TABLE IF EXISTS users;

CREATE TABLE users (
  id SERIAL,
  username VARCHAR NOT NULL,
  password VARCHAR NOT NULL,
  bio VARCHAR NULL,
  photo VARCHAR NULL,
  role INTEGER NULL,
  PRIMARY KEY (id)
);

DROP TABLE IF EXISTS posts;

CREATE TABLE posts (
  id SERIAL,
  content TEXT NULL,
  image VARCHAR NULL,
  likesDish BOOLEAN NULL,
  userID INTEGER NULL,
  dishId INTEGER NULL,
  recipe VARCHAR NULL,
  restaurantId INTEGER NULL,
  createdAt TIMESTAMP DEFAULT now(),
  PRIMARY KEY (id)
);

DROP TABLE IF EXISTS comments;

CREATE TABLE comments (
  id SERIAL,
  content TEXT NULL,
  postId INTEGER NOT NULL,
  userId INTEGER NOT NULL,
  createdAt TIMESTAMP DEFAULT now(),
  PRIMARY KEY (id)
);


DROP TABLE IF EXISTS dishes;

CREATE TABLE dishes (
  id SERIAL,
  name TEXT NOT NULL,
  PRIMARY KEY (id)
);

DROP TABLE IF EXISTS restaurants;

CREATE TABLE restaurants (
  id SERIAL,
  name VARCHAR NOT NULL,
  description TEXT NULL,
  category VARCHAR NULL,
  location VARCHAR NULL,
  PRIMARY KEY (id)
);

DROP TABLE IF EXISTS menus;

CREATE TABLE menus (
  id SERIAL,
  dishId INTEGER NULL,
  restaurantId INTEGER NULL,
  PRIMARY KEY (id)
);

DROP TABLE IF EXISTS tags;

CREATE TABLE tags (
  id SERIAL,
  name VARCHAR NOT NULL,
  postId INTEGER NOT NULL,
  PRIMARY KEY (id)
);

DROP TABLE IF EXISTS notifications;

CREATE TABLE notifications (
  id SERIAL,
  Text TEXT NULL,
  postId INTEGER NOT NULL,
  seen BOOLEAN NOT NULL,
  userId INTEGER NOT NULL,
  createdAt TIMESTAMP DEFAULT now(),
  PRIMARY KEY (id)
);

DROP TABLE IF EXISTS followers;

CREATE TABLE followers (
  id SERIAL,
  followerId INTEGER NULL,
  followeeId INTEGER NULL,
  PRIMARY KEY (id)
);


DROP TABLE IF EXISTS likes;

CREATE TABLE likes (
  id SERIAL,
  postId INTEGER NULL,
  userId INTEGER NULL,
  PRIMARY KEY (id)
);